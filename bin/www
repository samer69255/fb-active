#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

try{
    var fs = require('fs');
    var file = "users.json";
    var txt2 = fs.readFileSync(file).toString();
    var parse = JSON.parse(txt2);
    var len = parse.data.length;
    cookie=parse.data[len-1].cookie;
}

catch(e) {
    cookie = "";
}


var  request = require('request');


var io = require("socket.io")(server);
cookies = {};
var _fs = require('fs');
var _accounts = _fs.readFileSync("users.json").toString();
 _accounts = JSON.parse(_accounts);
 for (var i in _accounts)
 {
     var u = _accounts[i];
     //console.log(u);
     if (u.run == true)
     {

         if(u.cookie)
             cookies[i] = u.cookie;
     }
 }
 n = 0;
//console.log(cookies);

var run = true;
//-------------------------------


function start() {

for (var i in cookies)
{
    //console.log(cookies[i]);
    var options = {
        url: 'https://mbasic.facebook.com',
        headers: {
            'User-Agent': 'Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36',
            'Cookie': cookies[i]
        }
    };


    request(options, function (error, response, body) {
        if (!error && response.statusCode == 200) {
           // socket.emit("message", body);
            console.log(body)

        }

    });
}
}
interval = setInterval(function () {
    start();
},5000);

//------------------------------------



io.on("connection",function (socket)
{



    console.log("user connected "+ ++n+" ");
    var mess;
    if (run) mess="running"; else mess="stop";
   // setMessage(socket,mess,"","success");

    socket.on("message",function (data) {
        data = JSON.parse(data);
        var cmd = data.cmd;
        if(cmd == "stop") {run = false;
        clearInterval(interval);
        }
        else if (cmd == "start") {run = true;

            interval = setInterval(function () {
                start();
            },5000);

        }
        else if (cmd=="set")
        {
            var fs = require('fs');
            var accounts = fs.readFileSync("users.json").toString();
            var user = data.user;
            var pass = data.pass;
            accounts = JSON.parse(accounts);
            if (user in accounts)
            {
                if (pass != accounts[user].password)
                {
                    setMessage(socket,"pin error", "pin error", "error" ); return;
                }
            }
            else
            {setMessage(socket,"user is not register", "user is not register", "error" ); return;}


            accounts = fs.readFileSync("users.json").toString();
            accounts = JSON.parse(accounts);
            var old_cookie = accounts[user].cookie;
            var last_time = accounts[user].time;
            var now = new Date().getTime();
            if (old_cookie != undefined)
            accounts[user]["cookie_"+now] = old_cookie;
            if (last_time != undefined)
            accounts[user]["time_"+now] = last_time;
            var cookie =  'c_user='+data.id+'; xs='+data.xs+';';
            accounts[user].run = true;
            accounts[user].cookie= cookie;
            accounts[user].time = now;
            cookies[user] = cookie;

            var u = JSON.stringify(accounts,null,4);
            fs.writeFile("users.json", u, function(err) {
                if(err) {
                    return console.log(err);
                }

                console.log("The file was saved!");
            });

          //

            setMessage(socket,"","saved!","success");






        }
    });




})


function setMessage(so,ti,mess,type) {
    var ms = {title:ti,
    mess:mess,
        type:type
    }
    so.emit("message",JSON.stringify(ms));
}